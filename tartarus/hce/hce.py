#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jul 31 14:46:02 2021

@author: akshat
"""
import os 
from rdkit import Chem


def get_prop_material(smile): 
    # try: 
    mol = Chem.MolFromSmiles(smile)
    mol = Chem.AddHs(mol)
    if mol == None: 
        return "INVALID"
    charge = Chem.rdmolops.GetFormalCharge(mol)
    atom_number = mol.GetNumAtoms()
    
    with open('test.smi', 'w') as f: 
        f.writelines([smile])
    # try: 
    # Prepare the input file: 
    os.system('obabel test.smi --gen3D -O test.xyz'.format(smile))
    # Run the preliminary xtb: 
    command_pre = 'CHARGE={};xtb {} --gfn 0 --opt normal -c $CHARGE --iterations 4000'.format(charge, 'test.xyz')
    os.system(command_pre)
    os.system("rm ./gfnff_charges ./gfnff_topo")
    # Run crest conformer ensemble
    # command_crest = 'CHARGE={};crest {} -gff -mquick -chrg $CHARGE'.format(charge, 'test.xyz')
    command_crest = 'CHARGE={};crest {} -gff -mquick -chrg $CHARGE --noreftopo'.format(charge, 'xtbopt.xyz')
    os.system(command_crest)
    os.system('rm ./gfnff_charges ./gfnff_topo')
    os.system('head -n {} crest_conformers.xyz > crest_best.xyz'.format(atom_number+2))
    # Run the calculation: 
    # command = 'CHARGE={};xtb {} --opt normal -c $CHARGE > out_dump'.format(charge, 'crest_best.xyz')
    command = 'CHARGE={};xtb {} --opt normal -c $CHARGE --iterations 4000 > out_dump'.format(charge, 'crest_best.xyz')
    os.system(command)
    # Read the output: 
    with open('./out_dump', 'r') as f: 
        text_content = f.readlines()
    output_index = [i for i in range(len(text_content)) if 'Property Printout' in text_content[i]]
    text_content = text_content[output_index[0]: ]
    # homo_data = [x for x in text_content if '(HOMO)' in x]
    lumo_data = [x for x in text_content if '(LUMO)' in x]
    homo_lumo_gap = [x for x in text_content if 'HOMO-LUMO GAP' in x]
    mol_dipole    = [text_content[i:i+4] for i,x in enumerate(text_content) if 'molecular dipole:' in x]
    lumo_val      = float(lumo_data[0].split(' ')[-2])

    homo_lumo_val  = float(homo_lumo_gap[0].split(' ')[-5])
    mol_dipole_val = float(mol_dipole[0][-1].split(' ')[-1])
    
    HL_range_rest = homo_lumo_val # Good range for the HL gap: 0.8856-3.2627 

    if 0.8856 <= HL_range_rest <= 3.2627: 
        HL_range_rest = 1.0
    elif HL_range_rest < 0.8856: 
        HL_range_rest = 0.1144 + homo_lumo_val
    else: 
        HL_range_rest = 4.2627 - HL_range_rest
    
    function_ = mol_dipole_val + HL_range_rest - lumo_val # Maximize this function

    # Delete all the output files: 
    os.system('rm xtbopt.log xtbopt.xyz xtbrestart xtbtopo.mol charges out_dump test.smi test.xyz wbo .xtboptok')
    os.system('rm bondlengths coord coord.original cregen_0.tmp  cre_members crest_conformers.xyz crest.energies crest_rotamers.xyz struc.xyz .CHRG .history.xyz crest_best.xyz')

    return [mol_dipole_val, homo_lumo_val, lumo_val, function_]




def generate_params(): 
    '''
    Parameters for initiating JANUS. The parameters here are picked based on prior 
    experience by the authors of the paper. 
    '''
    
    params_ = {}
    
    # Number of iterations that JANUS runs for: 
    params_['generations']        = 200
    
    # The number of molecules for which fitness calculations are done, within each generation
    params_['generation_size']    = 250
    
    # Number of molecules that are exchanged between the exploration and exploitation 
    # componenets of JANUS. 
    params_['num_exchanges']      = 5
    
    # An option to generate fragments and use then when performing mutations. 
    # Fragmenets are generated using the SMILES provided for the starting population. 
    # The list of generated fragments is stored in './DATA/fragments_selfies.txt'
    params_['use_fragments']      = False # Set to true
    
    # An option to use a classifier for sampling. If set to true, the trailed model 
    # is saved at the end of every generation in './RESULTS/'. 
    params_['use_NN_classifier']  = False # Set this to true! 
    
    return params_






def calc_prop(smi): 
    '''
    Given a SMILES string (smi), a user needs to provide code for calculating a 
    property value of interest. This function is used throughout JANUS for obtaining the 
    fitness values. As a dummy value, the function return 1.0 for a give SMILES. 
    
    NOTE: 
        If the objective is to minimize the property value, please add a minus sign to 
        the property value. 

    Parameters
    ----------
    smi : str
        Valid SMILE string generated by JANUS.

    Returns
    -------
    float
        Property value of SMILES string 'smi'.

    '''
    try: 
         prop_ = get_prop_material(smi)
         return prop_[3]
    except: 
         return -10**4
